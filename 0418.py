#저번 시간 정리
#
#   Python 3.10.4 환경
#
#   2022. 04. 18 PM 07 : 00
#   다음 수업은 2022. 05. 09
#

#정수 = integer (int)
#실수 = float
#문자열 = string (str)
#불리언 - boolean (bool)

print(3)
print(3.14)
print('ㅎㅇ') # print("Hello")
print(True) # print(False)

#print() 함수로 묶는다. (2022. 04. 18)


print("10" + "20")
#? 1020 ?

A = '33'
B = '232'
#33232.

print(A+B)

type(3)
print(type(A+B))
#int가 아니라 str임.

print('ㅎㅇ' * 3)
#ㅎㅇ의 메시지가 3번 반복됨.

print(3 * 'gg')
#역시 gg의 메시지가 3번 출력된다.


print('hi')
print('hello')
#텍스트가 가로로 출력되는 모습을 볼 수 있다.

print('hi', end='')
#hi의 메시지가 두 번 출력된다.
#end=''는 자주 쓰이는 문법이다. 꼭 알아두자

print('hi', end=' ')
#띄어쓰기가 포함된 채로 출력된다.

print('hi', end=',')
#, (comma) 가 포함된 채로 출력된다.

print('hi\nhello')


#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#                       이스케이프 문자
#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


#   변수 값 응용하여 출력하기.
#
#   안녕하세요 = 1+33
#   print(안녕하세요, "라고 말했습니다.")
#
#   큰따옴표와 작은따옴표의 규칙을 지키지 않으면 Syntax Error가 발생한다.
#   문자열 내부에 작은따옴표를 넣을지 큰따옴표를 넣을지 생각하자

print ('여행자는 "안녕하세요" 라고 말했습니다.')


# \(백슬래시) 기호와 함꼐 문자와 조합하여 사용한다.
#
# 아래는 예제.

print('난 방금전에 분명 \'안녕!!\' 라고 말했어')
#   알면 좋은 기능
#
# 줄바꿈 = \n
# 탭 = \t

print('안녕하세요\n ㅎㅇ')
# 줄바꿈의 예시

print('hi\n', 'h')
# 줄바꿈의 자리는 어디에 들어가느냐에 따라 달라진다.
# 작은따옴표 / 큰따옴표 안에 반드시 들어가야 제 기능을 할 수 있다.

print('0은 정수입니다')
print()  # Enter 역할
print('3.14는 유리수입니다')
# 이렇게도 가능하게 할 수 있다

# 예제.
#
print ("이름\t나이\t소재지")
print ("홍길동\t11세\t부산")
print ("김사랑\t20세\t경기도")
print ("이만세\t31세\t경상남도")
# 이렇게도 활용 가능


#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#           여러 줄의 문자열 만들기
#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

print("동해물과\n백두산이")

print("""동해물과
백두산이""")
# 위의 것 두 개 모두 다 똑같은 출력이다!
# 차이점은 큰따옴표 사이에 \n을 집어넣은 것과,
# 줄을 아예 바꿔서 쓴 것이다.
#
# 아래의 것은 내가 쓴 대로 출력이 된다. ☆☆


#   문자열 연결 연산자
#

print("Hello World" + ",!")
# 숫자 연산자 (+) 와 혼동하지 말자
# 아래 예시.

print(10+20)  # 결과 값 : 30


#ㅡㅡㅡㅡㅡㅡㅡ
# 문자열 연산자
#ㅡㅡㅡㅡㅡㅡㅡ


print("ㅎㅇㅎㅇ" * 9) # 결과 값 : ㅎㅇ의 str 형태가 9번 반복되어 나옴

# 문자 선택 연산자 = 인덱싱 이라고 흔히 불린다.
# 아래 예시를 보면서 이해해 보자

print("# 1234567890987654321")

print("Hello World!"[0])
print("Hello World!"[1])
print("Hello World!"[2])
print("Hello WOrld!"[3])

#
# 출력 값 :
#
# H
# e
# l
# l
#
# 인덱싱은 0번째부터가 첫번째 문자열로 취급하기 때문에 이러한 특징에 주의하자




# 문자열 범위 선택 연산자도 역시 존재한다.
#
# 문자열의 특정 범위 선택
# 대괄호 안 숫자는 둘 중 하나 생략 가능
# 범위 적용 숫자에 주의
#
print("# 테스트")

print("Sophisticated"[0:2]) # 2에 해당하는 문자열은 출력하지 않는다. 값 : 0, 1
print("Sophisticated"[1:4]) # 4에 해당하는 문자열은 출력하지 않는다, 값 : 1, 2, 3

# [n:] 의 의미는, n번째 문자열부터 끝까지 출력함을 의미한다.  (단, n은 int형 자료)
print("Sophisticated"[2:]) # 결과 값 : phisticated  =  2번째 문자열부터 출력
print("Sophisticated"[:2]) # 이 경우는 위의 반대임

print("system/priv-app"[4:]) # 결과 값 : em/priv-app  =  4번째 문자열부터 출력
print("system/priv-app"[:4]) # 이 경우도 역시 위의 반대임


print("응애"[:])
# 결과 값 : 응애
# 이 경우는 처음부터 끝까지의 텍스트 자료형을 출력한다

print("응애"[-1])
# 결과 값 : 애
# 이 경우는 맨 마지막에서 첫번째 문자만 출력한다

print("응애"[-2])
# 결과 값 : 응
# 이 경우는 맨 마지막에서 두번째 문자만 출력한다

#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#           len() 함수
#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

# 예시 : len(<문자열 또는 리스트>)
#
# 괄호 안 문자열의 글자 수를 표시하는 함수이다
#
# print(len("안녕하세요")
# 결과 값 : 5

print(len("1234567890"))

# 다시 한 번 자료형의 형식을 확인해본다
#
print(type(len("안녕하세요")))
#
# len 이하의 값은 정수임을 알 수 있다


# int 함수를 활용하여 보자

#       int('3.14')


#   Traceback (most recent call last):
#       File "<pyshell#12>", line 1, in <module>
#           int("3.14")
#       ValueError: invalid literal for int() with base 10: '3.14'

# 문자열이기 때문에 오류가 난다




# 파이썬에서의 나눗셈은 무조건 실수가 나온다 !
#
# 예제 : 4/2
# 결과값 : 2.0
print(4/2, "가 나왔습니다")


# 파이썬에서의 나머지는 % 연산자를 이용하여 계산한다.
#
# 예제 : 4%2
# 결과값 : 0
print(4%2, "가 나왔습니다")





# '// 연산자' 라는 것도 존재한다. 한번 해 보자
#
# 예제 : 4//2
# 결과값 : 2
print(4//2, "가 나왔습니다")






# 제곱 연산자
#
# 대표 예제 : print(5 % 2)
#
# <숫자 A> ** <숫자 B> = 2³
print("# 테스트")
print("3 ** 3 =", 3 ** 3, "입니다.")
print("5 ** 4 =", 5 ** 4, "입니다.")

# a = 3 + 5
# a
#
# 여기서의 a는 일종의 변수(variable) 이다
# a의 값에 3 + 5에 해당하는 값을 저장한 뒤 a가 어떠한 값을 갖고 있는지 출력하는 과정이다


#   a = "X"
#   a+="B"
#   a
#   'XB'
#
#   shell prompt의 경우(1)
#   결과 값 : 'XB'
#
#       ELSE :
#
#   print(a)
#   XB
#
#   editor의 경우(2)
#   결과 값 : XB
#
#


# 종합
#       a = 10
#       b = 3.14
#       c = 'Hi'
#       d = True

a = 11
b = 33
c = a + b*2
print('두 수의 합은', c, '입니다') # 결과 값 : 77


#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#
#                               입력
#
#ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#
#
#
# ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ 절.대.중.요

# input() 함수를 많이 사용한다

X = input()
print("당신이 입력한 것은", X, "입니다!")
# 위의 예시로 사용할 수 있다
# 사용자의 입장에서 무엇을 입력해야 할지 대략적으로 파악할 수 없는 단점이 있다


Y = input('아무거나 입력해 봐! : ')
# print(Y)  -  임시 주석 처리.
#
# 이것이 더 편한 방법 같다.
# 훨씬 사용자의 입장에서 편리하고 사용하기 좋다.

print("이 자료형은", type(Y), "랍니다!!")
# type 함수를 추가하여 응용하기가 가능하다!


a = input('첫 번째 값을 넣어봐!')
b = input('두 번째 값을 넣어봐!')
c = a + b
print("두 값의 합은", c, "이야!!!")
# 라고 코드를 작성하면, 실제로는 두 값의 합이 나오는 것이 아닌 ab의 값이 출력된다.

a = int(input('첫 번째 값을 넣어봐!'))
b = int(input('두 번째 값을 넣어봐!'))
c = a + b
print("두 값의 합은", c, "라고 해!!!!")
# input 함수 전체를 int로 씌워버리면 해결이 가능하다!

#       int('30')
#       본 코드는 30을 정수로 바꾸라는 명령의 의미이다
#       꼭 기억해놓자

#
#               수업 종료 : 2022. 04. 18 PM 08 : 37
#
